/**
 * Generate a d.ts file for a given war3map.lua
 */
import * as fs from "fs-extra";
import * as path from "path";

export const types: Map<string, string> = new Map([
    ["cam", "camerasetup"],
    ["dest", "destructable"],
    ["item", "item"],
    ["rct", "rect"],
    ["snd", "sound"],
    ["trg", "trigger"],
    ["unit", "unit"],
]);

/**
 * Matches the file and extracts declarations of `gg_` and `udg_` variables.
 *
 * var: string
 * source: `[udg|gg]`
 * type: shortform type that worldedit expects the var to be
 * name: the identifier of the variable
 */
const MATCHER = /^(?<var>(?<source>udg|gg)_?(?<type>[\p{L}\p{N}]+)?_(?<name>\w+)).?=.+$/gimu;

/** Takes contents of `war3map.lua` and generates typescript definition file. */
export function parseLua(lua: string): string {
    const matches = [...lua.matchAll(MATCHER)];
    const found = new Set<string>();
    let output = `// DO NOT EDIT THIS FILE MANUALLY\n// ${new Date()}\n`;

    for (const match of matches) {
        const [line, variable, source, type, name] = match;
        void source, name;
        if (variable === undefined || found.has(variable)) continue;

        const isArray = line?.endsWith("{}");

        output += `declare let ${variable}: ${types.get(type!) ?? "unknown"}${isArray ? "[]" : ""} | undefined;\n`;

        found.add(variable);
    }

    return output;
}

export const isWar3mapLua = (filePath: string) => path.basename(filePath) === "war3map.lua";

export function CreateDefinitionFromFile(filePath: string, outDir: string): void {
    const mapName = path.basename(path.dirname(filePath));
    const dtsPath = path.join(outDir, `${mapName}.d.ts`);
    const luaCode = fs.readFileSync(filePath, { encoding: "utf-8" });
    const definition = parseLua(luaCode);

    console.log(`Writing d.ts for ${mapName}`);
    fs.writeFileSync(dtsPath, definition, "utf-8");
}
